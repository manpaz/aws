---
# CloudFormation::API::S3 Bucket
#
#   Cloudformation template to deploy an S3 bucket for the API ENV vars
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: '2010-09-09'
Description: API S3 Bucket template

###############################################################################
Parameters:

  ApiGwID:
    Description: ID of the API Gateway
    Type: String
    MinLength: "10"
    MaxLength: "10"
    Default: "a000000000"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: The Id must contain only letters and numbers

  Environment:
    Description: VPC environment
    Type: String
    MinLength: "4"
    MaxLength: "20"
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: Can only contain "prod" or "staging".

  BucketRole:
    Description: Role name of the bucket
    Type: String
    MinLength: "1"
    MaxLength: "42"
    ConstraintDescription: The role name of the bucket must be a string

  BucketUuid:
    Description: Unique ID to make the s3 bucket less discoverable
    Type: String
    MinLength: "21"
    MaxLength: "21"
    ConstraintDescription: Length of the ID must be exactly 21 characters

  KmsArn:
    Description: KMS symmetric key to enable encryption of images
    Type: String
    MinLength: "1"
    MaxLength: "128"
    Default: arn:aws:kms
    AllowedPattern: "[a-zA-Z0-9\\-/:]*"

  Organization:
    Description: Organization or Customer name
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: bashlinux
    AllowedPattern: "[a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      Name of the organization must contains only letters, numbers and hyphens

###############################################################################
Resources:
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
              KMSMasterKeyID: !Ref KmsArn
            BucketKeyEnabled: true
      BucketName: !Sub "bashlinux-api-${BucketRole}-${BucketUuid}"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'  # Adjust this for security
            AllowedMethods:
              - PUT
              - POST
              - GET
            AllowedHeaders:
              - '*'
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-api-${BucketRole}-${BucketUuid}"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: 'false'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenerateUploadUrlProd
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from botocore.config import Config

          config = Config(signature_version="s3v4")
          s3 = boto3.client("s3", config=config)

          BUCKET_NAME = os.environ["BUCKET_NAME"]

          def lambda_handler(event, context):
              file_name = str(uuid.uuid4()) + ".jpg"

              upload_url = s3.generate_presigned_url(
                  "put_object",
                  Params={
                      "Bucket": BUCKET_NAME,
                      "Key": file_name,
                      "ContentType": "image/jpeg",
                  },
                  ExpiresIn=3600,
              )

              public_url = f"https://{BUCKET_NAME}.s3.amazonaws.com/{file_name}"

              return {
                  "statusCode": 200,
                  "body": json.dumps({
                      "uploadUrl": upload_url,
                      "fileName": file_name,
                      "publicUrl": public_url
                  }),
              }
      Environment:
        Variables:
          BUCKET_NAME: !Ref PublicS3Bucket

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${PublicS3Bucket}/*"

  UploadIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGwID 
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt UploadLambda.Arn
      PayloadFormatVersion: "2.0"

  UploadRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGwID
      RouteKey: GET /upload
      Target: !Sub "integrations/${UploadIntegration}"

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UploadLambda
      Principal: apigateway.amazonaws.com

###############################################################################
Outputs:
        
  S3BucketArn:
    Description: The ARN of the S3 bucket holding the ENV vars file
    Value: !GetAtt PublicS3Bucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PublicS3BucketArn"
