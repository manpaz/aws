---
# Bashlinux::API::ECS Service
#
#   Cloudformation template to deploy an ECS Service
#   behind an API Gateway
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: '2010-09-09'
Description: API ECS service template

###############################################################################
Parameters:

  ApiGatewayCertificate:
    Description: ARN of the default SSL Certificate for the API Gateway
    Type: String
    AllowedPattern: "arn:aws:acm:.*"
    ConstraintDescription: >
      SSL Certificate ARN must begin with a letter and contain a valid arn string.

  ECSServiceName:
    Description: Name of the service
    Type: String
    MinLength: "1"
    MaxLength: "32"

  ECSTaskCpu:
    Description: The amount of milli-CPU units to allocate for the task
    Type: Number
    MinValue: 128
    MaxValue: 1024
    ConstraintDescription: >
      The amount of milli-CPU units must be a digit in between 128 a and 1024

  ECSTaskMemory:
    Description: The amount of memory in bytes to allocate for the task
    Type: Number
    MinValue: 128
    MaxValue: 1024
    ConstraintDescription: >
      The amount of memory in bytes must be a digit in between 128 a and 1024

  EnvApiPublicEndpoint:
    Description: DNS of the public API
    Type: String
    MinLength: "10"
    MaxLength: "128"
    AllowedPattern: '[a-zA-Z0-9\-\.]*' 
    
  Environment:
    Description: VPC environment
    Type: String
    MinLength: "4"
    MaxLength: "20"
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: Can only contain "prod" or "staging".

  EnvPrivateSubnetIds:
    Description: Private subnets in group 1 where ECS is deployed to
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: "1"
    MaxLength: "96"
    ConstraintDescription: Can only contain a list of Subnet IDs

  EnvVpcId:
    Description: VPC where the ECS cluster is deployed
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: vpc-
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\\-]*'
    ConstraintDescription: >
      VPC ID must begin with a letter and contain only alphanumeric characters.

###############################################################################
Resources:

  # ECS Default Service -------------------------
  ECSDefaultService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSFargateClusterName"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !ImportValue
                "Fn::Sub": "api-${Environment}-fargate-cluster-ECSSecurityGroupId"
          Subnets: !Ref EnvPrivateSubnetIds
      ServiceName: !Sub "bashlinux-${Environment}-${ECSServiceName}-service"
      ServiceRegistries:
        - RegistryArn: !GetAtt EcsDiscoveryDefaultService.Arn
          Port: 8080
      TaskDefinition: !Ref ECSTaskDefinition
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-service"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  EcsDiscoveryDefaultService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Description: !Sub 'Discovery Service for Bashlinux ${ECSServiceName} in ECS ${Environment}'
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref ECSServiceName
      NamespaceId: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSPrivateDnsNamespaceId"
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-discovery-service"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  # ECS Task Definition -------------------------
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECSServiceName}'
          EnvironmentFiles:
            - Type: s3
              Value:
                !Join
                - ""
                - - "Fn::ImportValue": !Sub "api-${Environment}-${ECSServiceName}-s3-bucket-S3BucketEnvVarsArn"
                  - !Sub "/${ECSServiceName}-${Environment}.env"
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "wget --no-verbose --tries=1 --spider http://localhost:8080/health"
            Interval: 5
            Retries: 2
            StartPeriod: 10
            Timeout: 3
          Name: !Sub "bashlinux-${ECSServiceName}"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          StopTimeout: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/bashlinux/${Environment}/ecs/task-${ECSServiceName}"
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: !Sub "task"
      Cpu: !Ref ECSTaskCpu
      ExecutionRoleArn: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSTaskExecutionRoleArn"
      Memory: !Ref ECSTaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSTaskRoleArn"
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-task-definition"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  # API Gateway ---------------------------------
  ApiGateway:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      ProtocolType: HTTP
      Name: !Sub "bashlinux-${Environment}-${ECSServiceName}-api"

  ApiGatewayIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGateway
      ConnectionId: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationType: HTTP_PROXY
      IntegrationUri: !GetAtt EcsDiscoveryDefaultService.Arn
      PayloadFormatVersion: 1.0
      RequestParameters:
        "overwrite:path": "/${request.path.proxy}"

  ApiGatewayStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGateway
      StageName: !Sub "bashlinux-${Environment}-${ECSServiceName}-stage"
      AutoDeploy: true

  ApiGatewayRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: !Sub "ANY /${ECSServiceName}/v1/{proxy+}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

  ApiGatewayDomain:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: !Sub "${EnvApiPublicEndpoint}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref ApiGatewayCertificate

  ApiGatewayMapping:
    Type: 'AWS::ApiGatewayV2::ApiMapping'
    Properties:
      ApiId: !Ref ApiGateway
      DomainName: !Ref ApiGatewayDomain
      Stage: !Ref ApiGatewayStage  

###############################################################################
Outputs:

  ApiGatewayDomainUrl:
    Description: The URL of the API Gateway
    Value: !GetAtt ApiGatewayDomain.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayDomainUrl'

  ECSDefaultServiceName:
    Description: The name of the Fargate ECS Service
    Value: !GetAtt ECSDefaultService.Name
    Export:
      Name: !Sub '${AWS::StackName}-ECSDefaultServiceName'
