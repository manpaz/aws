---
# Bashlinux::VPC::Endpoint
#   Cloudformation template to deploy a VPC endpoint
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
#
AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Endpoint template

###############################################################################
Parameters:

  Environment:
    Description: Working environment
    Type: String
    MinLength: "1"
    MaxLength: "20"
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: >
      Environment name can only contain "prod" or "staging"

  EndpointService:
    Description: Amazon service to connect to
    AllowedValues: [ "cloudwatch", "ecr", "s3", "ses" ]
    Default: "s3"
    Type: String

  EnvVpcId:
    Description: VPC where the endpoint is deployed to
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: vpc-
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      VPC ID must begin with a letter and contain only alphanumeric characters.

  EnvVpccCidr:
    Description: VPC CIDR
    Type: String
    MinLength: "10"
    MaxLength: "18"

  EnvPrivateSubnets:
    Description: Private subnets where the interface endpoints are deployed
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: "1"
    MaxLength: "96"

  Organization:
    Description: Organization or Customer name
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: bashlinux
    AllowedPattern: "[a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      Name of the organization must contains only letters, numbers and hyphens

  VPCRouteTables:
    Description: List of private route tables
    Type: CommaDelimitedList

###############################################################################
Conditions:

  CreateVpcEndpointCloudwatch:
    !Equals [ !Ref EndpointService, cloudwatch ]

  CreateVpcEndpointEcr:
    !Equals [ !Ref EndpointService, ecr ]

  CreateVpcEndpointS3:
    !Equals [ !Ref EndpointService, s3 ]

  CreateVpcEndpointInterfaceSG:
    !Not [ !Equals [ !Ref EndpointService, s3 ] ]

  CreateVpcEndpointSes:
    !Equals [ !Ref EndpointService, ses ]

###############################################################################
Resources:

  # Service: Cloudwatch ---------------
  VpcEndpointCloudwatch:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpcEndpointCloudwatch
    Properties:
      PrivateDnsEnabled: "true"
      SecurityGroupIds: [ !Ref VpcEndpointInterfaceSG ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds: !Ref EnvPrivateSubnets
      VpcEndpointType: Interface
      VpcId: !Ref EnvVpcId

  # Service: ECR ----------------------
  VpcEndpointEcrApi:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpcEndpointEcr
    Properties:
      PrivateDnsEnabled: "true"
      SecurityGroupIds: [ !Ref VpcEndpointInterfaceSG ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds: !Ref EnvPrivateSubnets
      VpcEndpointType: Interface
      VpcId: !Ref EnvVpcId

  VpcEndpointEcrDkr:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpcEndpointEcr
    Properties:
      PrivateDnsEnabled: "true"
      SecurityGroupIds: [ !Ref VpcEndpointInterfaceSG ]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds: !Ref EnvPrivateSubnets
      VpcEndpointType: Interface
      VpcId: !Ref EnvVpcId

  # Service: S3 -----------------------
  VpcEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpcEndpointS3
    Properties:
      PrivateDnsEnabled: false
      RouteTableIds: !Ref VPCRouteTables
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.${EndpointService}"
      VpcEndpointType: Gateway
      VpcId: !Ref EnvVpcId

  # Service: SES ----------------------
  VpcEndpointSes:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVpcEndpointSes
    Properties:
      PrivateDnsEnabled: "true"
      SecurityGroupIds: [ !Ref VpcEndpointInterfaceSesSG ]
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.email-smtp"
      SubnetIds: !Ref EnvPrivateSubnets
      VpcEndpointType: Interface
      VpcId: !Ref EnvVpcId

  # SECURITY GROUPS --------------------
  VpcEndpointInterfaceSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpcEndpointInterfaceSG
    Properties:
      GroupDescription: "HTTPS: Allow traffic to VPC Endpoints"
      VpcId: !Ref EnvVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref EnvVpccCidr
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${EndpointService}-vpc-endpoint"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  VpcEndpointInterfaceSesSG:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVpcEndpointSes
    Properties:
      GroupDescription: "SMTP: Allow traffic to VPC Endpoints"
      VpcId: !Ref EnvVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 465
          ToPort: 465
          CidrIp: !Ref EnvVpccCidr
        - IpProtocol: tcp
          FromPort: 587
          ToPort: 587
          CidrIp: !Ref EnvVpccCidr
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${EndpointService}-vpc-endpoint"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"
