---
# Bashlinux::Single::VPC Network
#
#   Cloudformation template to deploy an environment VPC
#   with 1 subnet
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Single Network template

###############################################################################
Parameters:

  BastionAsNat:
    Description: Deploy an AWS NAT GW if the bastion is not a NAT GW
    Type: String
    MinLength: "2"
    MaxLength: "3"
    Default: "no"
    AllowedValues: [ "yes", "no" ]
    ConstraintDescription: Can only contain "yes", "no".

  Environment:
    Description: VPC environment
    Type: String
    MinLength: "1"
    MaxLength: "20"
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: Can only contain "prod", "staging".

  Organization:
    Description: Organization or Customer name
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: gesvi
    AllowedPattern: "[a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      Name of the organization must contains only letters, numbers and hyphens

###############################################################################
Conditions:

  noNatGateway:
    !Equals [ !Ref BastionAsNat, yes ]

###############################################################################
Mappings:

  Region2Index:
    us-east-1:
      REGION: "0"
    us-west-2:
      REGION: "1"
    us-east-2:
      REGION: "2"

  Env2Domains:
    prod:
      Domain: prod.bashlinux.com
    staging:
      Domain: staging.bashlinux.com

  SubnetConfigIpv6:
    Public1A:
      Subnet: 60::/64
    Public2A:
      Subnet: 70::/64
    Public2B:
      Subnet: 71::/64

  SubnetConfig:
    VPC:
      prod    : [ 10.1.0.0/20, 10.1.16.0/20, 10.1.32.0/20 ]
      staging : [ 10.11.0.0/20, 10.11.16.0/20, 10.11.32.0/20 ]
    Public1A:
      prod    : [ 10.1.0.0/26, 10.1.16.0/26, 10.1.32.0/26 ]
      staging : [ 10.11.0.0/26, 10.11.16.0/26, 10.11.32.0/26 ]
    Public2A:
      prod    : [ 10.1.1.0/26, 10.1.17.0/26, 10.1.33.0/26 ]
      staging : [ 10.11.1.0/26, 10.11.17.0/26, 10.11.33.0/26 ]
    Public2B:
      prod    : [ 10.1.1.64/26, 10.1.17.64/26, 10.1.33.64/26 ]
      staging : [ 10.11.1.64/26, 10.11.17.64/26, 10.11.33.64/26 ]
    Private1A:
      prod    : [ 10.1.2.0/24, 10.1.18.0/24, 10.1.34.0/24 ]
      staging : [ 10.11.2.0/24, 10.11.18.0/24, 10.11.34.0/24 ]
    Private2A:
      prod    : [ 10.1.5.0/24, 10.1.21.0/24, 10.1.37.0/24 ]
      staging : [ 10.11.5.0/24, 10.11.21.0/24, 10.11.37.0/24 ]
    Private2B: 
      prod    : [ 10.1.6.0/24, 10.1.22.0/24, 10.1.38.0/24 ]
      staging : [ 10.11.6.0/24, 10.11.22.0/24, 10.11.38.0/24 ]
    Private3A:
      prod    : [ 10.1.8.0/24, 10.1.24.0/24, 10.1.40.0/24 ]
      staging : [ 10.11.8.0/24, 10.11.24.0/24, 10.11.40.0/24 ]

###############################################################################
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index,  !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, VPC, !Ref Environment ]
      EnableDnsHostnames: "true"
      Tags:
      - Key: Name
        Value:
          !Join
          - "-"
          - - bashlinux
            - !Ref Environment
            - vpc
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          !Join
          - "-"
          - - bashlinux
            - !Ref Environment
            - internet-gateway
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

  Ipv6VPCCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  PublicSubnet1A:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      AssignIpv6AddressOnCreation: "true"
      Ipv6CidrBlock:
        !Join
        - ""
        - - !Select
            - "0"
            - !Split
              - 00::/56
              - !Select
                - "0"
                - !GetAtt VPC.Ipv6CidrBlocks
          - !FindInMap [ SubnetConfigIpv6, Public1A, Subnet ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Public1A, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-public-subnet-1a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: ec2
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  PublicSubnet2A:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      AssignIpv6AddressOnCreation: "true"
      Ipv6CidrBlock:
        !Join
        - ""
        - - !Select
            - "0"
            - !Split
              - 00::/56
              - !Select
                - "0"
                - !GetAtt VPC.Ipv6CidrBlocks
          - !FindInMap [ SubnetConfigIpv6, Public2A, Subnet ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Public2A, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-public-subnet-2a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: alb
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  PublicSubnet2B:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "1", !GetAZs "" ]
      AssignIpv6AddressOnCreation: "true"
      Ipv6CidrBlock:
        !Join
        - ""
        - - !Select
            - "0"
            - !Split
              - 00::/56
              - !Select
                - "0"
                - !GetAtt VPC.Ipv6CidrBlocks
          - !FindInMap [ SubnetConfigIpv6, Public2B, Subnet ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Public2B, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-public-subnet-2b"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: alb
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: bashlinux-public-route-table
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRouteIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2A
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2B
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: bashlinux-public-acl
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "80"
        To: "80"

  InboundHTTPPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "101"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "80"
        To: "80"

  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "102"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "443"
        To: "443"

  InboundHTTPSPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "103"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "443"
        To: "443"

  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "104"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "22"
        To: "22"

  InboundSSHPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "105"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "22"
        To: "22"

  InboundBastionPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "106"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "1194"
        To: "1194"

  InboundBastionPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "107"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "1194"
        To: "1194"

  InboundEphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "108"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "1024"
        To: "65535"

  InboundEphemeralPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "109"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "1024"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "101"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnet1ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1A
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2A
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnet2BNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2B
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateSubnet1A:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Private1A, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-subnet-1a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: ec2
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  PrivateSubnet2A:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Private2A, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-subnet-2a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: documentdb
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  PrivateSubnet2B:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "1", !GetAZs "" ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Private2B, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-subnet-2b"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: documentdb
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  PrivateSubnet3A:
    Type: AWS::EC2::Subnet
    DependsOn: Ipv6VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      CidrBlock:
        !Select
        - !FindInMap [ Region2Index, !Ref AWS::Region, REGION ]
        - !FindInMap [ SubnetConfig, Private3A, !Ref Environment ]
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-subnet-3a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:application-tier
        Value: elasticache
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: noNatGateway
    Properties:
      AllocationId: !GetAtt NatIPAddressA.AllocationId
      SubnetId: !Ref PublicSubnet1A
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-nat-gateway-a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  NatIPAddressA:
    DependsOn: InternetGateway
    Condition: noNatGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-nat-ipaddress-a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: public
      - Key: bashlinux:can-delete
        Value: "false"

  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-route-table-a"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:network-visibility
        Value: private
      - Key: bashlinux:can-delete
        Value: "false"

  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Condition: noNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnet1ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnet2ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2A
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnet2BRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2B
      RouteTableId: !Ref PrivateRouteTableA

  PrivateSubnet3ARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3A
      RouteTableId: !Ref PrivateRouteTableA

  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-private-acl"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  InboundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  InboundPrivateNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "101"
      Protocol: "-1"
      RuleAction: allow
      Egress: "false"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "0"
        To: "65535"

  OutBoundPrivateNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  OutBoundPrivateNetworkAclIpv6Entry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: "101"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      Ipv6CidrBlock: "::/0"
      PortRange:
        From: "0"
        To: "65535"

  PrivateSubnet1ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2A
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet2BNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2B
      NetworkAclId: !Ref PrivateNetworkAcl

  PrivateSubnet3ANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3A
      NetworkAclId: !Ref PrivateNetworkAcl

  HpcPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: cluster
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-placement-group"
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  EnvHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment:
          !Join
          - " "
          - - !FindInMap
              - Env2Domains
              - !Ref Environment
              - Domain
            - "domain for the environment: "
            - !Ref Environment
      Name: !FindInMap [ Env2Domains, !Ref Environment, Domain ]
      VPCs:
      - VPCId: !Ref VPC
        VPCRegion: !Ref AWS::Region
      HostedZoneTags:
      - Key: Name
        Value: !FindInMap [ Env2Domains, !Ref Environment, Domain ]
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"
      - Key: bashlinux:network-visibility
        Value: private

  EnvDHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !FindInMap [ Env2Domains, !Ref Environment, Domain ]
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
      - Key: bashlinux:organization-name
        Value: !Ref Organization
      - Key: bashlinux:environment-name
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"
      - Key: bashlinux:network-visibility
        Value: private
      - Key: Name
        Value: !FindInMap [ Env2Domains, !Ref Environment, Domain ]

  EnvVPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref EnvDHCPOptions
      VpcId: !Ref VPC

###############################################################################
Outputs:

  VpcId:
    Description: "VPC: Created VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  VpcCidr:
    Description: "VPC: Created VPC CIDR"
    Value: !Select
      - !FindInMap [ Region2Index,  !Ref AWS::Region, REGION ]
      - !FindInMap [ SubnetConfig, VPC, !Ref Environment ]
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"

  VpcMainPublicSubnetId:
    Description: "VPC: Primary Public Subnet ID"
    Value: !Ref PublicSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-VpcMainPublicSubnetId"

  VpcMainPrivateSubnetId:
    Description: "VPC: Primary Private Subnet ID"
    Value: !Ref PrivateSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-VpcMainPrivateSubnetId"

  EnvHostedZoneId:
    Description: "Route53: Hosted Zone ID"
    Value: !Ref EnvHostedZone
    Export:
      Name: !Sub "${AWS::StackName}-ZoneId"
