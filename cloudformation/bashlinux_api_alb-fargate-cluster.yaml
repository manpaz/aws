---
# Bashlinux::API::Fargate Cluster
#
#   Cloudformation template to deploy a Fargate cluster
#   behind a public ALB
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: '2010-09-09'
Description: API Fargate for ECS template

###############################################################################
Parameters:

  DevOpsBucketName:
    Description: Name of the s3 bucket where the DevOps assets are retrieved
    Type: String
    MinLength: "8"
    MaxLength: "32"
    ConstraintDescription: Length of the name must be between 8 to 32 characters

  Environment:
    Description: VPC environment
    Type: String
    MinLength: '4'
    MaxLength: '20'
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: >
      Environment name can only contain "prod" or "staging".

  EnvVpcId:
    Description: VPC where the Kubernetes cluster is deployed
    Type: String
    MinLength: '1'
    MaxLength: '32'
    Default: vpc-
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\\-]*'
    ConstraintDescription: >
      VPC ID must begin with a letter and contain only alphanumeric characters.

  EnvPublicSubnetIds:
    Description: Private subnets in group 1 where the ALB is deployed to
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: '1'
    MaxLength: '96'
    ConstraintDescription: Can only contain a list of Subnet IDs

  LoadBalancerCertificate:
    Description: ARN of the default SSL Certificate for the Application Load Balancer
    Type: String
    AllowedPattern: "arn:aws:acm:.*"
    ConstraintDescription: >
      SSL Certificate ARN must begin with a letter and contain a valid arn string.

  Organization:
    Description: Organization or Customer name
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: gesvi
    AllowedPattern: "[a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      Name of the organization must contains only letters, numbers and hyphens

###############################################################################
Resources:

  # ALB: Security Group -------------------------

  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      /bashlGroupDescription: >-
        LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on HTTP IPv4
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on HTTPS IPv4
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIpv6: "::/0"
          Description: Allow from anyone on HTTP IPv6
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIpv6: "::/0"
          Description: Allow from anyone on HTTPS IPv6
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIpv6: "::/0"
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIpv6: "::/0"
      VpcId: !Ref EnvVpcId
      Tags:
      - Key: Name
        Value: !Sub 'bashlinux-${Environment}-ecs-alb'
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: 'false'

  AlbSecurityGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt
        - AlbSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Target group egress
      DestinationSecurityGroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      FromPort: 8080
      ToPort: 8080

  # EC2: ECS Security Group ---------------------

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIpv6: "::/0"
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIpv6: "::/0"
        - IpProtocol: tcp
          FromPort: '587'
          ToPort: '587'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '27017'
          ToPort: '27017'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref EnvVpcId
      Tags:
      - Key: Name
        Value: !Sub 'bashlinux-${Environment}-ecs'
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: 'false'

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Ingress from Load Balancer
      FromPort: 8080
      GroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - AlbSecurityGroup
        - GroupId
      ToPort: 8080

  ECSSecurityGroupIngressFromSelf:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Ingress from ECS SG
      FromPort: 8080
      GroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      SourceSecurityGroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      ToPort: 8080

  ECSSecurityGroupEgressToSelf:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: tcp
      Description: Egress from ECS SG
      FromPort: 8080
      GroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      DestinationSecurityGroupId: !GetAtt
        - ECSSecurityGroup
        - GroupId
      ToPort: 8080

  # ALB: Public LB ------------------------------

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub 'bashlinux-${Environment}-alb'
      IpAddressType: dualstack
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt AlbSecurityGroup.GroupId
      Subnets: !Ref EnvPublicSubnetIds
      Type: application
      Tags:
      - Key: Name
        Value: !Sub 'bashlinux-${Environment}-alb'
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: 'false'

  LoadBalancerListenerDefaultTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /health
      Name: !Sub 'ecs-${Environment}-default-tg'
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref EnvVpcId

  LoadBalancerListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificate
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerDefaultTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  # ECS: ServiceDiscovery -----------------------
  ECSPrivateDnsNamespace:
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
    Properties:
      Name: !Sub 'bashlinux-${Environment}.ecs'
      Vpc: !Ref EnvVpcId
      Tags:
      - Key: Name
        Value: !Sub 'bashlinux-${Environment}-namespace'
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: 'false'

  # ECS: Fargate --------------------------------
  ECSFargateCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub 'ecs-${Environment}-cluster'
      Tags:
      - Key: Name
        Value: !Sub 'bashlinux-${Environment}-cluster'
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: 'false'

  # ECS: IAM Roles ------------------------------
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub 'bashlinux-${Environment}-task-execution-role'

  ECSTaskExecutionManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Managed policy for the task execution role
      ManagedPolicyName: !Sub 'bashlinux-${Environment}-task-execution-managed-policy'
      PolicyDocument:
        "Fn::Transform":
          Name: AWS::Include
          Parameters:
            Location: !Sub "s3://${DevOpsBucketName}/iam-policies/iam_policy_bashlinux_api_ecs_task_execution_${Environment}.json"
      Roles:
        - Ref: "ECSTaskExecutionRole"
    DependsOn:
    - ECSTaskExecutionRole

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      RoleName: !Sub 'bashlinux-${Environment}-task-role'

  ECSTaskManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Managed policy for the task role
      ManagedPolicyName: !Sub 'bashlinux-${Environment}-task-managed-policy'
      PolicyDocument:
        "Fn::Transform":
          Name: AWS::Include
          Parameters:
            Location: !Sub "s3://${DevOpsBucketName}/iam-policies/iam_policy_bashlinux_api_ecs_task_${Environment}.json"
      Roles:
        - Ref: "ECSTaskRole"
    DependsOn:
    - ECSTaskRole

###############################################################################
Outputs:

  ECSFargateClusterName:
    Description: The name of the Fargate cluster
    Value: !Ref ECSFargateCluster
    Export:
      Name: !Sub '${AWS::StackName}-ECSFargateClusterName'

  LoadBalancerListenerArn:
    Description: ARN of the ALB listener for HTTPS traffic
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerListener'

  LoadBalancerListenerDefaultTargetGroupECSArn:
    Description: ARN of the ALB target group for ECS
    Value: !Ref LoadBalancerListenerDefaultTargetGroupECS
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerListenerDefaultTargetGroupECSArn'

  ECSSecurityGroupId:
    Description: The Security Group ID to use to gain access to the data stores
    Value: !GetAtt ECSSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-ECSSecurityGroupId'

  ECSTaskExecutionRoleArn:
    Description: The ARN of the role for ECS task execution
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskExecutionRoleArn'

  ECSTaskExecutionRoleId:
    Description: The Id of the role for ECS task execution
    Value: !GetAtt ECSTaskExecutionRole.RoleId
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskExecutionRoleId'

  ECSTaskRoleArn:
    Description: The Id of the role for ECS tasks
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskRoleArn'

  ECSTaskRoleId:
    Description: The Id of the role for ECS tasks
    Value: !GetAtt ECSTaskRole.RoleId
    Export:
      Name: !Sub '${AWS::StackName}-ECSTaskRoleId'

  ECSPrivateDnsNamespaceId:
    Description: The Id of the Private Dns Namespace
    Value: !Ref ECSPrivateDnsNamespace
    Export:
      Name: !Sub '${AWS::StackName}-ECSPrivateDnsNamespaceId'
