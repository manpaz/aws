---
# Bashlinux::API::ECS Autoscaling
#
#   Cloudformation template to setup Autoscaling for an ECS Service
#   on a Fargate cluster behind an API Gateway
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: '2010-09-09'
Description: API Fargate Autoscaling for ECS template

###############################################################################
Parameters:

  Environment:
    Description: VPC environment
    Type: String
    MinLength: '4'
    MaxLength: '20'
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: >
      Environment name can only contain "prod" or "staging".

  ECSMaxContainers:
    Description: The maximum amount of Fargate ECS containers
    Type: Number
    MinValue: 1
    MaxValue: 1000
    ConstraintDescription: >
      The amount of max containers must be a digit in between 1 a and 1000

  ECSServiceName:
    Description: Name of the service
    Type: String
    MinLength: "1"
    MaxLength: "32"

###############################################################################
Resources:

  # Autoscaling Role ----------------------------
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:PutScalingPolicy
                  - application-autoscaling:RegisterScalableTarget
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                Resource: "*"

  # Autoscaling Target for ECS Service ----------
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ECSMaxContainers
      MinCapacity: 1
      ResourceId: !Join
        - "/"
        - - service
          - !ImportValue
              "Fn::Sub": "api-${Environment}-fargate-cluster-ECSFargateClusterName"
          - !ImportValue
              "Fn::Sub": "api-${Environment}-${ECSServiceName}-ecs-service-ECSDefaultServiceName"
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Autoscaling Policies ------------------------
  # Scaling Policy for API Gateway Request Count
  RequestCountScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: RequestCountScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 1000  # Desired request count threshold per minute
        CustomizedMetricSpecification:
          MetricName: Count
          Namespace: AWS/ApiGateway
          Statistic: Sum
          Unit: Count
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Scaling Policy for CPU Utilization
  CPUUtilizationScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilizationScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0  # Target CPU utilization percentage
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Scaling Policy for Memory Utilization
  MemoryUtilizationScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryUtilizationScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0  # Target Memory utilization percentage
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

  # Autoscaling Cloudwatch Alarms ---------------
  # CloudWatch Alarm for Request Count (API Gateway)
  RequestCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RequestCountAlarm
      MetricName: Count
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1000  # Trigger scale-up if > 1000 requests per minute
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref RequestCountScalingPolicy

  # CloudWatch Alarm for CPU Utilization
  CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPUUtilizationAlarm
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            "Fn::Sub": "api-${Environment}-fargate-cluster-ECSFargateClusterName"
        - Name: ServiceName
          Value: !ImportValue
            "Fn::Sub": "api-${Environment}-${ECSServiceName}-ecs-service-ECSDefaultServiceName"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 75  # Trigger scale-up if CPU > 75%
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref CPUUtilizationScalingPolicy

  # CloudWatch Alarm for Memory Utilization
  MemoryUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: MemoryUtilizationAlarm
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !ImportValue
            "Fn::Sub": "api-${Environment}-fargate-cluster-ECSFargateClusterName"
        - Name: ServiceName
          Value: !ImportValue
            "Fn::Sub": "api-${Environment}-${ECSServiceName}-ecs-service-ECSDefaultServiceName"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 75  # Trigger scale-up if Memory > 75%
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref MemoryUtilizationScalingPolicy
