---
# Bashlinux::API::ECS Service
#
#   Cloudformation template to deploy an ECS Service
#   behind a public ALB
#
#   Manuel F Martinez
#   Bashlinux
#   Los Angeles, CA
#
AWSTemplateFormatVersion: '2010-09-09'
Description: API ECS service template

###############################################################################
Parameters:

  ALBListenerPriority:
    Description: The priority order of the listener rule in the ALB
    Type: Number
    MinValue: 2
    MaxValue: 50000
    ConstraintDescription: >
      The priority number must be a digit in between 2 a and 50000

  ECSServiceName:
    Description: Name of the service
    Type: String
    MinLength: "1"
    MaxLength: "32"

  ECSTaskCpu:
    Description: The amount of milli-CPU units to allocate for the task
    Type: Number
    MinValue: 128
    MaxValue: 1024
    ConstraintDescription: >
      The amount of milli-CPU units must be a digit in between 128 a and 1024

  ECSTaskMemory:
    Description: The amount of memory in bytes to allocate for the task
    Type: Number
    MinValue: 128
    MaxValue: 1024
    ConstraintDescription: >
      The amount of memory in bytes must be a digit in between 128 a and 1024

  Environment:
    Description: VPC environment
    Type: String
    MinLength: "4"
    MaxLength: "20"
    Default: staging
    AllowedValues: [ "prod", "staging" ]
    ConstraintDescription: Can only contain "prod" or "staging".

  EnvPrivateSubnetIds:
    Description: Private subnets in group 1 where ECS is deployed to
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: "1"
    MaxLength: "96"
    ConstraintDescription: Can only contain a list of Subnet IDs

  EnvVpcId:
    Description: VPC where the ECS cluster is deployed
    Type: String
    MinLength: '1'
    MaxLength: '32'
    Default: vpc-
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9\\-]*'
    ConstraintDescription: >
      VPC ID must begin with a letter and contain only alphanumeric characters.

  Organization:
    Description: Organization or Customer name
    Type: String
    MinLength: "1"
    MaxLength: "32"
    Default: gesvi
    AllowedPattern: "[a-zA-Z0-9\\-]*"
    ConstraintDescription: >
      Name of the organization must contains only letters, numbers and hyphens

###############################################################################
Resources:

  # ECS Default Service -------------------------
  ECSDefaultService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSFargateClusterName"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 0
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub "bashlinux-${ECSServiceName}"
          ContainerPort: 8080
          TargetGroupArn: !ImportValue
            "Fn::Sub": "api-${Environment}-fargate-cluster-LoadBalancerListenerDefaultTargetGroupECSArn"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !ImportValue
                "Fn::Sub": "api-${Environment}-fargate-cluster-ECSSecurityGroupId"
          Subnets: !Ref EnvPrivateSubnetIds
      ServiceName: !Sub "bashlinux-${Environment}-${ECSServiceName}-service"
      ServiceRegistries:
        - RegistryArn: !GetAtt EcsDiscoveryDefaultService.Arn
          Port: 8080
      TaskDefinition: !Ref ECSServiceTaskDefinition
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-service"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  EcsDiscoveryDefaultService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      Description: !Sub 'Discovery Service for Bashlinux ${ECSServiceName} in ECS ${Environment}'
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Ref ECSServiceName
      NamespaceId: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSPrivateDnsNamespaceId"
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-discovery-service"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"

  # ECS Task Definition -------------------------
  ECSServiceTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECSServiceName}'
          EnvironmentFiles:
            - Type: s3
              Value:
                !Join
                - ""
                - - "Fn::ImportValue": !Sub "api-${Environment}-${ECSServiceName}-s3-bucket-S3BucketEnvVarsArn"
                  - !Sub "/${ECSServiceName}-${Environment}.env"
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "wget --no-verbose --tries=1 --spider http://localhost:8080/health"
            Interval: 5
            Retries: 2
            Timeout: 3
          Name: !Sub 'bashlinux-${ECSServiceName}'
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "/bashlinux/ecs/task-${ECSServiceName}"
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: !Sub "task"
      Cpu: !Ref ECSTaskCpu
      ExecutionRoleArn: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSTaskExecutionRoleArn"
      Memory: !Ref ECSTaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !ImportValue
        "Fn::Sub": "api-${Environment}-fargate-cluster-ECSTaskRoleArn"
      Tags:
      - Key: Name
        Value: !Sub "bashlinux-${Environment}-${ECSServiceName}-task-definition"
      - Key: bashlinux:environment-type
        Value: !Ref Environment
      - Key: bashlinux:application-id
        Value: !Ref AWS::StackName
      - Key: bashlinux:can-delete
        Value: "false"
